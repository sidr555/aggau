/**
 * Мега - парсер
 * Created by sidr on 08.02.16.
 */

var fs = require("fs");
var log = require('log')(module);
//var jsdom = require('jsdom');
var cheerio = require('cheerio');
var _ = require('underscore');


var _parsersConfig = null;

var Parser = module.exports = function(place, page) {
    this._place = place;
    //this._page = type;
    this._file = "tests/" + place + "/" + page + ".html";

    log.info("file:", this._file);

    this.loadConfig();

    this.data = {};
}

Parser.prototype.loadConfig = function() {
    if (!this._config) {
        if (!_parsersConfig) {
            _parsersConfig = JSON.parse(fs.readFileSync("app/utp_parser.json", 'utf8'));
        }

        log.error("conf:", _parsersConfig);

        if (typeof _parsersConfig[this._place] == "object") {
            this._config = _parsersConfig[this._place];
        } else {
            throw new Error("Не найден конфиг парсера для площадки id=" + this._place);
        }
    }

    log.error(this._config);
    return this;
}

Parser.prototype.loadPage = function() {
    if (!this._html && this._file) {
        log.info("Load HTML from ", this._file);
        this._html = fs.readFileSync(this._file, 'utf8');
    }
    return this;
}

Parser.prototype.parse = function(next) {
    if (!this._html) {
        this.loadPage();
    }

    var $ = cheerio.load(this._html);
    log.debug($);

    //log.info("C XML", $xml.val());

    var xml = cheerio.load($("#xmlData").val(), {
        xmlMode: true
    });

    if (!xml) {
        throw new Error("Ошибка парсинга: не найден #xmlData");
    }

    // list
    //log.info("C XML", xml("BidView").text());
    var items = [];

    //log.info("Conf", this._config);

    var dict = this._config.dictionary;
    if (typeof dict !== "object") {
        throw new Error("Не обнаружен словарь для площадки " + this._place);
    }


    // list
    /*
    xml("List data row").each(function() {
        var item = {};
        if (this.children.length) {
            $(this.children).each(function(){
                if (typeof dict[this.name] === "undefined") {
                    throw new Error("Неизвестный параметр: " + this.name + " (" + this.children[0].data + ")");
                }
                if (dict[this.name]) {
                    item[dict[this.name]] = this.children[0].data;
                }
            });
        }
        items.push(item);
    });
    */

    // lot

    // files
    //xml("BidView Bids BidDebtorInfo BidAdditionalDocEDS file").each(function() {

    //log.info(typeof _(dict).each);

    xml("Purchase Bids Bid").each(function() {
        
    });


    _(dict).each(function(val, key){
        var el = xml(key);
        if (el && el.length) {
            //log.info(val, typeof el.children[0].data);
            log.info(val, el.text());
        }
        //if (xml(key))
        //log.info(key, val, xml(key).length);
    });


    //log.error(xml("List data row").length);
    console.log(items);











    //var dom7 = fs.readFileSync("app/node_modules/dom7.js", "utf-8");
    ////var parser_src = fs.readFileSync("app/node_modules/utp_parser/" + this._config.script, "utf-8");
    //var cookieJar = jsdom.createCookieJar();
    //
    //var self = this;
    //
    //jsdom.env({
    //    html: this._html,
    //    src: [dom7],
    //    cookieJar: cookieJar,
    //    parsingMode: "html",
    //    referrer: "http://yandex.ru",
    //    userAgent: "Aggau",
    //    //virtualConsole: jsdom.createVirtualConsole().sendTo(console),
    //    features: {
    //        FetchExternalResources: ["script"],
    //        ProcessExternalResources: ["script"],
    //        SkipExternalResources: false
    //    },
    //    onload: function(window){
    //        log.info("jsdom loaded");
    //    },
    //    created: function(err, window){
    //        log.info("jsdom created", err);
    //    },
    //    done: function(err, window) {
    //        log.info("jsdom load done", err);
    //
    //        window.config = self._config;
    //
    //        //var $ = window.Dom7;
    //
    //        var parserFn = require("utp_parser/" + self._config.script)(window.Dom7, self._page);
    //        if (parserFn) {
    //            // todo code here
    //        }
    //    }
    //});

    return this;
}

Parser.prototype.get = function() {

    return this;
}

